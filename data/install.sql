/*
SQLyog Ultimate v10.00 Beta1
MySQL - 5.0.96-community-nt : Database - my_db
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`my_db` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `my_db`;

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `id` bigint(20) NOT NULL auto_increment,
  `uid` bigint(20) NOT NULL default '0',
  `time` datetime NOT NULL,
  `content` varchar(200) NOT NULL default '',
  `belong_id` bigint(20) NOT NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `comment` */

/*Table structure for table `image` */

DROP TABLE IF EXISTS `image`;

CREATE TABLE `image` (
  `id` bigint(20) NOT NULL auto_increment,
  `url` varchar(255) NOT NULL default '',
  `belong_id` bigint(20) NOT NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `url` (`url`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

/*Data for the table `image` */

insert  into `image`(`id`,`url`,`belong_id`) values (1,'static/upload/iamges/2016-10-10/d621ddd8-4a02-4855-9b61-3066e4cb93e7.jpg',3),(2,'static/upload/iamges/2016-10-10/ae92acce-11de-4148-9f32-21280c63ee26.jpg',4),(3,'static/upload/iamges/2016-10-10/1b9e623a-3485-49c4-a082-ceb4794d9e10.jpg',4),(4,'static/upload/iamges/2016-10-10/b7476f6b-08b3-4036-957b-9f99055bebfb.jpg',4),(7,'static/upload/iamges/2016-10-18/5f848fb0-7922-49ee-9374-30f107ddd208.jpg',16),(17,'static/upload/iamges/2016-10-21/fe6abf8b-60c8-40ac-9237-d7beada9094d.jpg',7),(18,'static/upload/iamges/2016-10-21/41e5e09a-d870-4040-ae98-d4448539e4e8.jpg',16),(19,'static/upload/iamges/2016-10-21/daf009d6-0990-47fc-94cd-1d65da9662ab.jpg',16),(20,'static/upload/iamges/2016-10-25/1fd4958b-a580-4b12-b4ef-4e4f7bdf1af0.jpg',17),(21,'static/upload/iamges/2016-10-25/fe1a51f2-928f-4a93-b99c-356b685cdcc1.jpg',18),(22,'static/upload/iamges/2016-10-25/634a6345-01ce-4caa-98a8-ee850e885f8e.jpg',18),(23,'static/upload/iamges/2016-10-26/f983ba70-8eff-4be9-9538-9502d081716d.jpg',17),(25,'static/upload/iamges/2016-10-29/9f0b041f-d238-4cb3-b01f-9b8259f2cc57.jpg',23);

/*Table structure for table `image_temp` */

DROP TABLE IF EXISTS `image_temp`;

CREATE TABLE `image_temp` (
  `id` bigint(20) NOT NULL auto_increment,
  `url` varchar(255) NOT NULL default '',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `url` (`url`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

/*Data for the table `image_temp` */

insert  into `image_temp`(`id`,`url`) values (2,'static/upload/iamges/2016-10-18/1f498fc7-3a93-4e4b-84eb-e7a4d2602ffc.jpg'),(5,'static/upload/iamges/2016-10-18/2c8e7c1e-d990-41c8-9f6c-f93009413597.jpg'),(10,'static/upload/iamges/2016-10-18/3f9efe94-0e69-4742-97c2-ee3c183544fa.jpg'),(7,'static/upload/iamges/2016-10-18/40b98d75-d9aa-4dee-80da-1c71e81b45ae.jpg'),(11,'static/upload/iamges/2016-10-18/59d40db7-7c4c-4ef6-8cf7-7f5a6e49fac9.jpg'),(3,'static/upload/iamges/2016-10-18/959922fc-6c3c-481b-baad-b5e2ff3347ac.jpg'),(12,'static/upload/iamges/2016-10-18/9ce69374-def3-4dae-b24b-f42c55b2fc17.jpg'),(9,'static/upload/iamges/2016-10-18/a34246d5-bf3e-4f28-95c7-f5954608107a.jpg'),(8,'static/upload/iamges/2016-10-18/ae01040f-02bc-4f37-a77c-a53170875e52.jpg'),(4,'static/upload/iamges/2016-10-18/be56fc03-4381-4458-a826-31c4cebaf8dc.jpg'),(6,'static/upload/iamges/2016-10-18/f1364527-169a-41af-b8c2-97ee65281bac.jpg'),(1,'static/upload/iamges/2016-10-18/f183b4c8-e76c-477d-a388-77a609149b6e.jpg'),(18,'static/upload/iamges/2016-10-21/02acc84e-b4cb-4126-a9fd-2d85297d158b.jpg'),(13,'static/upload/iamges/2016-10-21/0792d208-5099-41b6-b450-e95173cd193e.jpg'),(20,'static/upload/iamges/2016-10-21/2e284db6-01d8-4d29-9db9-80297619fff0.jpg'),(16,'static/upload/iamges/2016-10-21/502dea21-4c84-4c5a-81fa-69643556d25b.jpg'),(15,'static/upload/iamges/2016-10-21/65dbca33-7235-4dd7-a0ca-8f1641f923e2.png'),(22,'static/upload/iamges/2016-10-21/c7a03651-3079-4200-9ab0-63a6abd95ade.jpg'),(17,'static/upload/iamges/2016-10-21/d7d96a11-ac37-4885-ba1f-cfd93521b016.jpg'),(14,'static/upload/iamges/2016-10-21/de4309b7-2bc5-400e-a567-c09a1b62f218.jpg'),(19,'static/upload/iamges/2016-10-21/eb32c500-04a4-4885-99e0-3e19fa477b24.jpg'),(21,'static/upload/iamges/2016-10-21/f7b8c94c-79b2-4b70-8341-b41869272ae1.jpg'),(23,'static/upload/iamges/2016-10-29/67e9e29f-f451-4029-8bd4-012bf75c1eeb.jpg');

/*Table structure for table `post` */

DROP TABLE IF EXISTS `post`;

CREATE TABLE `post` (
  `id` bigint(20) NOT NULL auto_increment,
  `content_type` bigint(20) NOT NULL default '0',
  `title` varchar(255) NOT NULL default '',
  `content` varchar(20480) NOT NULL default '',
  `section_type` int(11) NOT NULL default '0',
  `describe` varchar(512) NOT NULL default '',
  `author_id` bigint(20) NOT NULL,
  `created` datetime NOT NULL default '2016-01-01 10:10:00',
  `updated` datetime NOT NULL default '2016-01-01 10:10:00',
  `reply_time` datetime NOT NULL default '2016-01-01 10:10:00',
  `reply_count` bigint(20) NOT NULL default '0',
  `reply_last_user_id` bigint(20) NOT NULL default '0',
  `video_url` varchar(255) NOT NULL default '',
  `browse_count` bigint(20) NOT NULL default '0',
  `image_label` varchar(255) NOT NULL default '',
  `position` int(11) NOT NULL default '0',
  `is_rolling` tinyint(1) NOT NULL default '0',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `title` (`title`),
  KEY `post_created` (`created`),
  KEY `post_updated` (`updated`),
  KEY `post_reply_time` (`reply_time`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

/*Data for the table `post` */

insert  into `post`(`id`,`content_type`,`title`,`content`,`section_type`,`describe`,`author_id`,`created`,`updated`,`reply_time`,`reply_count`,`reply_last_user_id`,`video_url`,`browse_count`,`image_label`,`position`,`is_rolling`) values (2,0,'快速入门','<ul>	<li><a href=\"http://beego.me/docs/quickstart/new.md\">bee 工具新建项目</a></li>	<li><a href=\"http://beego.me/docs/quickstart/router.md\">路由设置</a></li>	<li><a href=\"http://beego.me/docs/quickstart/controller.md\">controller 运行机制</a></li>	<li><a href=\"http://beego.me/docs/quickstart/model.md\">model 逻辑</a></li>	<li><a href=\"http://beego.me/docs/quickstart/view.md\">view 渲染</a></li>	<li><a href=\"http://beego.me/docs/quickstart/static.md\">静态文件处理</a></li></ul>',1,'beego 是一个能够进行快速开发应用的框架，快速入门将带领你快速的建立一个 beego 的项目，然后运行起来。接着修改代码，让我们了解整个 MVC 的运行机制。那么让我们开始创建项目吧！',1,'2016-10-10 08:15:47','2016-10-10 08:15:47','2016-10-10 08:15:47',0,0,'',5,'',0,0),(3,1,'创建项目','<p>现在一切就绪我们就可以开始创建项目了，打开终端，进入&nbsp;<code>$GOPATH/src</code>&nbsp;所在的目录：</p><pre><code>➜  src  bee new quickstart[INFO] Creating application.../gopath/src/quickstart//gopath/src/quickstart/conf//gopath/src/quickstart/controllers//gopath/src/quickstart/models//gopath/src/quickstart/routers//gopath/src/quickstart/tests//gopath/src/quickstart/static//gopath/src/quickstart/static/js//gopath/src/quickstart/static/css//gopath/src/quickstart/static/img//gopath/src/quickstart/views//gopath/src/quickstart/conf/app.conf/gopath/src/quickstart/controllers/default.go/gopath/src/quickstart/views/index.tpl/gopath/src/quickstart/routers/router.go/gopath/src/quickstart/tests/default_test.go/gopath/src/quickstart/main.go2014/11/06 18:17:09 [SUCC] New application successfully created!<img alt=\"\" src=\"/static/upload/iamges/2016-10-10/d621ddd8-4a02-4855-9b61-3066e4cb93e7.jpg\" style=\"width: 480px; height: 427px;\" /></code></pre>',0,'beego 的项目基本都是通过 bee 命令来创建的，所以在创建项目之前确保你已经安装了 bee 工具和 beego。如果你还没有安装，那么请查阅 beego 的安装 和 bee 工具的安装。\r\n\r\n现在一切就绪我们就可以开始创建项目了，打开终端，进入 $GOPATH/src 所在的目录：',1,'2016-10-10 08:17:09','2016-10-10 08:17:09','2016-10-10 08:17:09',0,0,'',11,'web-design graphic',0,0),(4,2,'项目路由设置','<p><img alt=\"\" src=\"/static/upload/iamges/2016-10-10/ae92acce-11de-4148-9f32-21280c63ee26.jpg\" style=\"width: 1440px; height: 1280px;\" /><img alt=\"\" src=\"/static/upload/iamges/2016-10-10/1b9e623a-3485-49c4-a082-ceb4794d9e10.jpg\" style=\"width: 1306px; height: 1160px;\" /><img alt=\"\" src=\"/static/upload/iamges/2016-10-10/b7476f6b-08b3-4036-957b-9f99055bebfb.jpg\" style=\"width: 1440px; height: 1280px;\" /></p><p>路由包里面我们看到执行了路由注册<code>beego.Router</code>, 这个函数的功能是映射URL到controller，第一个参数是URL(用户请求的地址)，这里我们注册的是&nbsp;<code>/</code>，也就是我们访问的不带任何参数的URL，第二个参数是对应的 Controller，也就是我们即将把请求分发到那个控制器来执行相应的逻辑，我们可以执行类似的方式注册如下路由：</p><pre><code>beego.Router(&quot;/user&quot;, &amp;controllers.UserController{})    </code></pre><p>这样用户就可以通过访问&nbsp;<code>/user</code>&nbsp;去执行&nbsp;<code>UserController</code>&nbsp;的逻辑。这就是我们所谓的路由，更多更复杂的路由规则请查询&nbsp;<a href=\"http://beego.me/docs/mvc/controller/router.md\">beego 的路由设置</a></p><p>再回来看看main函数里面的&nbsp;<code>beego.Run</code>，&nbsp;<code>beego.Run</code>&nbsp;执行之后，我们看到的效果好像只是监听服务端口这个过程，但是它内部做了很多事情：</p><ul>	<li>	<p>解析配置文件</p>	<p>beego 会自动解析在 conf 目录下面的配置文件&nbsp;<code>app.conf</code>，通过修改配置文件相关的属性，我们可以定义：开启的端口，是否开启 session，应用名称等信息。</p>	</li>	<li>	<p>执行用户的hookfunc</p>	<p>beego会执行用户注册的hookfunc，默认的已经存在了注册mime，用户可以通过函数<code>AddAPPStartHook</code>注册自己的启动函数。</p>	</li>	<li>	<p>是否开启 session</p>	<p>会根据上面配置文件的分析之后判断是否开启 session，如果开启的话就初始化全局的 session。</p>	</li>	<li>	<p>是否编译模板</p>	<p>beego 会在启动的时候根据配置把 views 目录下的所有模板进行预编译，然后存在 map 里面，这样可以有效的提高模板运行的效率，无需进行多次编译。</p>	</li>	<li>	<p>是否开启文档功能</p>	<p>根据EnableDocs配置判断是否开启内置的文档路由功能</p>	</li>	<li>	<p>是否启动管理模块</p>	<p>beego 目前做了一个很酷的模块，应用内监控模块，会在 8088 端口做一个内部监听，我们可以通过这个端口查询到 QPS、CPU、内存、GC、goroutine、thread 等统计信息。</p>	</li>	<li>	<p>监听服务端口</p>	<p>这是最后一步也就是我们看到的访问 8080 看到的网页端口，内部其实调用了&nbsp;<code>ListenAndServe</code>，充分利用了 goroutine 的优势</p>	</li></ul><p>一旦 run 起来之后，我们的服务就监听在两个端口了，一个服务端口 8080 作为对外服务，另一个 8088 端口实行对内监控。</p><p>通过这个代码的分析我们了解了 beego 运行起来的过程，以及内部的一些机制。接下来让我们去剥离 Controller 如何来处理逻辑的。</p><p><a href=\"http://beego.me/docs/quickstart/controller.md\">controller 运行机制</a></p>',1,'前面我们已经创建了 beego 项目，而且我们也看到它已经运行起来了，那么是如何运行起来的呢？让我们从入口文件先分析起来吧：\r\n\r\npackage main\r\n\r\nimport (\r\n    _ \"quickstart/routers\"\r\n    \"github.com/astaxie/beego\"\r\n)\r\n\r\nfunc main() {\r\n    beego.Run()\r\n}',1,'2016-10-10 08:20:40','2016-10-10 08:20:40','2016-10-10 08:20:40',0,0,'',11,'web-design graphic logo',0,0),(5,3,'beego 的 MVC 架构介绍','<div class=\"text-center\"><iframe allowfullscreen=\"\" frameborder=\"1\" height=\"315\" src=\"http://www.tudou.com/v/EliSnrCpCi4/&amp;resourceId=0_04_05_99/v.swf\" uuid=\"15616539\" width=\"560\"></iframe></div><ol>	<li>初始化 Context 对象，根据请求判断是否为 WebSocket 请求，如果是的话设置 Input，同时判断请求的方法是否在标准请求方法中（GET、POST、PUT、DELETE、PATCH、OPTIONS、HEAD），防止用户的恶意伪造请求攻击造成不必要的影响。</li>	<li>执行 BeforeRouter 过滤器，当然在 beego 里面有开关设置。如果用户设置了过滤器，那么该开关打开，这样可以提高在没有开启过滤器的情况下提高执行效率。如果在执行过滤器过程中，responseWriter 已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li>	<li>开始执行静态文件的处理，查看用户的请求 URL 是否和注册在静态文件处理 StaticDir 中的 prefix 是否匹配。如果匹配的话，采用&nbsp;<code>http</code>&nbsp;包中默认的 ServeFile 来处理静态文件。</li>	<li>如果不是静态文件开始初始化 session 模块(如果开启 session 的话)，这个里面大家需要注意，如果你的 BeforeRouter 过滤器用到了 session 就会报错，你应该把加入到 AfterStatic 过滤器中。</li>	<li>开始执行 AfterStatic 过滤器，如果在执行过滤器过程中，responseWriter 已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li>	<li>执行过过滤器之后，开始从固定的路由规则中查找和请求 URL 相匹配的对象。这个匹配是全匹配规则，即如果用户请求的 URL 是<code>/hello/world</code>，那么固定规则中&nbsp;<code>/hello</code>&nbsp;是不会匹配的，只有完全匹配才算匹配。如果匹配的话就进入逻辑执行，如果不匹配进入下一环节的正则匹配。</li>	<li>正则匹配是进行正则的全匹配，这个正则是按照用户添加 beego 路由顺序来进行匹配的，也就是说，如果你在添加路由的时候你的顺序影响你的匹配。和固定匹配一样，如果匹配的话就进行逻辑执行，如果不匹配进入 Auto 匹配。</li>	<li>如果用户注册了 AutoRouter，那么会通过&nbsp;<code>controller/method</code>&nbsp;这样的方式去查找对应的 Controller 和他内置的方法，如果找到就开始执行逻辑，如果找不到就跳转到监控判断。</li>	<li>如果找到 Controller 的话，那么就开始执行逻辑，首先执行 BeforeExec 过滤器，如果在执行过滤器过程中，responseWriter 已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li>	<li>Controller 开始执行 Init 函数，初始化基本的一些信息，这个函数一般都是 beego.Controller 的初始化，不建议用户继承的时候修改该函数。</li>	<li>是否开启了 XSRF，开启的话就调用 Controller 的 XsrfToken，然后如果是 POST 请求就调用 CheckXsrfCookie 方法。</li>	<li>继续执行 Controller 的 Prepare 函数，这个函数一般是预留给用户的，用来做 Controller 里面的一些参数初始化之类的工作。如果在初始化中 responseWriter 有输出，那么就直接进入 Finish 函数逻辑。</li>	<li>如果没有输出的话，那么根据用户注册的方法执行相应的逻辑，如果用户没有注册，那么就调用 http.Method 对应的方法（Get/Post 等）。执行相应的逻辑，例如数据读取，数据赋值，模板显示之类的，或者直接输出 JSON 或者 XML。</li>	<li>如果 responseWriter 没有输出，那么就调用 Render 函数进行模板输出。</li>	<li>执行 Controller 的 Finish 函数，这个函数是预留给用户用来重写的，用于释放一些资源。释放在 Init 中初始化的信息数据。</li>	<li>执行 AfterExec 过滤器，如果有输出的话就跳转到监控判断逻辑。</li>	<li>执行 Controller 的 Destructor，用于释放 Init 中初始化的一些数据。</li>	<li>如果这一路执行下来都没有找到路由，那么会调用 404 显示找不到该页面。</li>	<li>最后所有的逻辑都汇聚到了监控判断，如果用户开启了监控模块（默认是开启一个 8088 端口用于进程内监控），这样就会把访问的请求链接扔给监控程序去记录当前访问的 QPS，对应的链接访问的执行时间，请求链接等。</li></ol><p>接下来就让我们开始进入 beego 的 MVC 核心第一步，路由设置：</p><ul>	<li><a href=\"http://beego.me/docs/mvc/controller/router.md\">路由设置</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/controller.md\">控制器函数</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/xsrf.md\">xsrf过滤</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/session.md\">session控制</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/flash.md\">flash数据</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/params.md\">请求数据处理</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/jsonxml.md\">多种格式数据输出</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/validation.md\">表单数据验证</a></li>	<li><a href=\"http://beego.me/docs/mvc/view/view.md\">模板输出</a></li>	<li><a href=\"http://beego.me/docs/mvc/view/template.md\">模板函数</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/errors.md\">错误处理</a></li>	<li><a href=\"http://beego.me/docs/mvc/view/static.md\">静态文件处理</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/config.md\">参数配置</a></li>	<li><a href=\"http://beego.me/docs/mvc/controller/logs.md\">日志处理</a></li></ul>',2,'通过文字来描述如下：\r\n\r\n在监听的端口接收数据，默认监听在 8080 端口。\r\n用户请求到达 8080 端口之后进入 beego 的处理逻辑。',1,'2016-10-10 08:23:57','2016-10-10 08:23:57','2016-10-10 08:23:57',0,0,'http://www.tudou.com/v/EliSnrCpCi4/&resourceId=0_04_05_99/v.swf',8,'',0,0),(6,0,'参数配置','<p><img alt=\"\" src=\"https://www.baidu.com/img/bd_logo1.png\" style=\"width: 540px; height: 258px;\" /></p><h2>默认配置解析</h2><p>beego 默认会解析当前应用下的&nbsp;<code>conf/app.conf</code>&nbsp;文件。</p><p>通过这个文件你可以初始化很多 beego 的默认参数：</p><pre><code>appname = beepkghttpaddr = &quot;127.0.0.1&quot;httpport = 9090runmode =&quot;dev&quot;autorender = falserecoverpanic = falseviewspath = &quot;myview&quot;</code></pre><p>上面这些参数会替换 beego 默认的一些参数, beego 的参数主要有哪些呢？请参考<a href=\"https://godoc.org/github.com/astaxie/beego#pkg-constants。\">https://godoc.org/github.com/astaxie/beego#pkg-constants。</a><br />BConfig就是beego里面的默认的配置，你也可以直接通过<code>beego.BConfig.AppName=&quot;beepkg&quot;</code>这样来修改，和上面的配置效果一样，只是一个在代码里面写死了，<br />而配置文件就会显得更加灵活。</p>',2,'beego 目前支持 INI、XML、JSON、YAML 格式的配置文件解析，但是默认采用了 INI 格式解析，用户可以通过简单的配置就可以获得很大的灵活性。',1,'2016-10-10 08:38:24','2016-10-10 08:38:24','2016-10-10 08:38:24',0,0,'',5,'',0,0),(7,1,'Bootstrap 更新','<h1>Bootstrap</h1><h1>是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。</h1><p><img alt=\"\" src=\"/static/upload/iamges/2016-10-21/fe6abf8b-60c8-40ac-9237-d7beada9094d.jpg\" style=\"width: 480px; height: 427px;\" /></p><p><img alt=\"\" src=\"http://v3.bootcss.com/assets/img/devices.png\" style=\"width: 680px; height: 245px;\" /></p>',1,'简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。',2,'2016-10-11 05:17:18','2016-10-21 13:01:31','2016-10-11 05:17:18',0,0,'',94,' web-design',0,0),(8,0,'beego','<pre lang=\"go\"><code>var lists []orm.ParamsListnum, err := o.QueryTable(&quot;user&quot;).ValuesList(&amp;lists)if err == nil {    fmt.Printf(&quot;Result Nums: %d\\n&quot;, num)    for _, row := range lists {        fmt.Println(row)    }}</code></pre>',0,'ValuesList\r\n\r\n顾名思义，返回的结果集以slice存储\r\n\r\n结果的排列与 Model 中定义的 Field 顺序一致\r\n\r\n返回的每个元素值以 string 保存',1,'2016-10-17 16:28:45','2016-10-17 16:28:45','2016-10-17 16:28:45',0,0,'',26,'',0,0),(16,2,'返回值:Boolean','<h3>示例</h3><h4 xmlns=\"\">描述:</h4><p xmlns=\"\">给包含有某个类的元素进行一个动画。</p><h5 xmlns=\"\">HTML 代码:</h5><pre xmlns=\"\"><code>&lt;div class=&quot;protected&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code></pre><h5 xmlns=\"\">jQuery 代码:</h5><pre xmlns=\"\"><code>$(&quot;div&quot;).click(function(){  if ( $(this).hasClass(&quot;protected&quot;) )    $(this)      .animate({ left: -10 })      .animate({ left: 10 })      .animate({ left: -10 })      .animate({ left: 10 })      .animate({ left: 0 });});</code></pre><p><code><img alt=\"\" src=\"/static/upload/iamges/2016-10-18/5f848fb0-7922-49ee-9374-30f107ddd208.jpg\" style=\"width: 320px; height: 284px;\" /></code></p><p><code><img alt=\"\" src=\"/static/upload/iamges/2016-10-21/daf009d6-0990-47fc-94cd-1d65da9662ab.jpg\" style=\"width: 480px; height: 427px;\" /></code></p><p><code><img alt=\"\" src=\"/static/upload/iamges/2016-10-21/41e5e09a-d870-4040-ae98-d4448539e4e8.jpg\" style=\"width: 480px; height: 427px;\" /></code></p>',1,'检查当前的元素是否含有某个特定的类，如果有，则返回true。\r\n',2,'2016-10-18 08:17:23','2016-10-21 12:37:25','2016-10-18 08:17:23',0,0,'',119,' web-design',0,0),(17,2,'世界你好123','<p>目前 beego 内置的模板函数如下所示：</p><ul>	<li>	<p>dateformat</p>	<p>实现了时间的格式化，返回字符串，使用方法 {{dateformat .Time &ldquo;2006-01-02T15:04:05Z07:00&rdquo;}}。</p>	</li>	<li>	<p>date</p>	<p>实现了类似 PHP 的 date 函数，可以很方便的根据字符串返回时间，使用方法 {{date .T &ldquo;Y-m-d H:i:s&rdquo;}}。</p>	</li>	<li>	<p>compare</p>	<p>实现了比较两个对象的比较，如果相同返回 true，否者 false，使用方法 {{compare .A .B}}。</p>	</li>	<li>	<p>substr</p>	<p>实现了字符串的截取，支持中文截取的完美截取，使用方法 {{substr .Str 0 30}}。</p>	</li>	<li>	<p>html2str</p>	<p>实现了把 html 转化为字符串，剔除一些 script、css 之类的元素，返回纯文本信息，使用方法 {{html2str .Htmlinfo}}。</p>	</li>	<li>	<p>str2html</p>	<p>实现了把相应的字符串当作 HTML 来输出，不转义，使用方法 {{str2html .Strhtml}}。</p>	</li>	<li>	<p>htmlquote</p>	<p>实现了基本的 html 字符转义，使用方法 {{htmlquote .quote}}。</p>	</li>	<li>	<p>htmlunquote</p>	<p>实现了基本的反转移字符，使用方法 {{htmlunquote .unquote}}。</p>	</li>	<li>	<p>renderform</p>	<p>根据 StructTag 直接生成对应的表单，使用方法 {{&amp;struct | renderform}}。</p>	</li>	<li>	<p>assets_js</p>	<p>为 js 文件生成一个&nbsp;<code>&lt;script&gt;</code>&nbsp;标签. 使用方法 {{assets_js src}}</p>	</li>	<li>	<p>assets_css</p>	<p>为 css 文件生成一个&nbsp;<code>&lt;link&gt;</code>&nbsp;标签. 使用方法 {{assets_css src}}</p>	</li>	<li>	<p>config</p>	<p>获取 AppConfig 的值. 使用方法 {{config configType configKey defaultValue}}. 可选的 configType 有 String, Bool, Int, Int64, Float, DIY</p>	</li>	<li>	<p>map_get</p>	<p>获取&nbsp;<code>map</code>&nbsp;的值</p>	<p><code><img alt=\"\" src=\"/static/upload/iamges/2016-10-25/1fd4958b-a580-4b12-b4ef-4e4f7bdf1af0.jpg\" style=\"margin-left: 100px; margin-right: 100px; width: 480px; height: 427px;\" /></code><img alt=\"\" src=\"/static/upload/iamges/2016-10-26/f983ba70-8eff-4be9-9538-9502d081716d.jpg\" style=\"width: 480px; height: 427px;\" /></p>	</li>	<li>	<p>&nbsp;</p>	</li>	<li>	<pre><code>// In controllerData[&quot;m&quot;] = map[string]interface{} {    &quot;a&quot;: 1,    &quot;1&quot;: map[string]float64{        &quot;c&quot;: 4,    },}// In view{{ map_get m &quot;a&quot; }} // return 1{{ map_get m 1 &quot;c&quot; }} // return 4</code></pre>	</li>	<li>	<p>urlfor</p>	<p>获取控制器方法的 URL</p>	<pre><code>{{urlfor &quot;TestController.List&quot;}}</code></pre>	<p><a href=\"https://beego.me/docs/mvc/view/zh-CN/mvc/controller/urlbuilding.md#%E6%A8%A1%E6%9D%BF%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">详见</a></p>	</li></ul>',1,'模板函数\r\nbeego 支持用户定义模板函数，但是必须在 beego.Run() 调用之前，设置如下',2,'2016-10-25 06:50:31','2016-10-26 13:36:17','2016-10-25 06:50:31',0,0,'',12,' web-design logo',0,0),(18,2,'ksks l love ','<p><img alt=\"\" src=\"/static/upload/iamges/2016-10-25/fe1a51f2-928f-4a93-b99c-356b685cdcc1.jpg\" style=\"width: 320px; height: 284px;\" /><img alt=\"\" src=\"/static/upload/iamges/2016-10-25/634a6345-01ce-4caa-98a8-ee850e885f8e.jpg\" style=\"width: 320px; height: 284px;\" /></p>',2,'测试123',2,'2016-10-25 07:08:48','2016-10-26 13:29:15','2016-10-25 07:08:48',0,0,'',55,' web-design',0,0),(19,0,'1234567890','<p>hdghdfg hh d h hfg hfgh fg hgf h h&nbsp;</p>',1,'qwtgtrsyh',2,'2016-10-26 13:42:37','2016-10-26 13:42:37','2016-10-26 13:42:37',0,0,'',3,' web-design',0,0),(21,0,'起源与发展','<p>在 2008 年年中，Go 语言的设计工作接近尾声，一些员工开始以全职工作状态投入到这个项目的编译器和运行实现上。Ian Lance Taylor 也加入到了开发团队中，并于 2008 年 5 月创建了一个 gcc 前端。</p><p>Russ Cox 加入开发团队后着手语言和类库方面的开发，也就是 Go 语言的标准包。在 2009 年 10 月 30 日，Rob Pike 以 Google Techtalk 的形式第一次向人们宣告了 Go 语言的存在。</p><p>直到 2009 年 11 月 10 日，开发团队将 Go 语言项目以 BSD-style 授权（完全开源）正式公布在 Linux 和 Mac OS X 平台上的版本。Hector Chu 于同年 11 月 22 日公布了 Windows 版本。</p><p>作为一个开源项目，Go 语言借助开源社区的有生力量达到快速地发展，并吸引更多的开发者来使用并改善它。自该开源项目发布以来，超过 200 名非谷歌员工的贡献者对 Go 语言核心部分提交了超过 1000 个修改建议。在过去的 18 个月里，又有 150 开发者贡献了新的核心代码。这俨然形成了世界上最大的开源团队，并使该项目跻身&nbsp;<a href=\"http://www.ohloh.net\">Ohloh</a>&nbsp;前 2% 的行列。大约在 2011 年 4 月 10 日，谷歌开始抽调员工进入全职开发 Go 语言项目。开源化的语言显然能够让更多的开发者参与其中并加速它的发展速度。Andrew Gerrand 在 2010 年加入到开发团队中成为共同开发者与支持者。</p><p>在 Go 语言在 2010 年 1 月 8 日被&nbsp;<a href=\"http://www.tiobe.com\">Tiobe</a>（闻名于它的编程语言流行程度排名）宣布为 &ldquo;2009 年年度语言&rdquo; 后，引起各界很大的反响。目前 Go 语言在这项排名中的最高记录是在 2010 年 2 月创下的第13名，流行程度 1778%。</p>',0,'Go 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的研发工作。',1,'2016-10-29 05:10:53','2016-10-29 05:10:53','2016-10-29 05:10:53',0,0,'',0,' web-design',0,0),(22,0,'.2 语言的主要特性与发展的环境和影响因素','<p>在声明和包的设计方面，Go 语言受到 Pascal、Modula 和 Oberon 系语言的影响；在并发原理的设计上，Go 语言从同样受到 Tony Hoare 的 CSP（通信序列进程&nbsp;<em>Communicating Squential Processes</em>）理论影响的 Limbo 和 Newsqueak 的实践中借鉴了一些经验，并使用了和 Erlang 类似的机制。</p><p>这是一门完全开源的编程语言，因为它使用 BSD 授权许可，所以任何人都可以进行商业软件的开发而不需要支付任何费用。</p><p>尽管为了能够让目前主流的开发者们能够对 Go 语言中的类 C 语言的语法感到非常亲切而易于转型，但是它在极大程度上简化了这些语法，使得它们比 C/C++ 的语法更加简洁和干净。同时，Go 语言也拥有一些动态语言的特性，这使得使用 Python 和 Ruby 的开发者们在使用 Go 语言的时候感觉非常容易上手。</p><p>下图展示了一些其它编程语言对 Go 语言的影响：</p><p><img alt=\"\" src=\"/static/upload/iamges/2016-10-29/67e9e29f-f451-4029-8bd4-012bf75c1eeb.jpg\" /></p><p>图 1.3 其它编程语言对 Go 语言的影响</p><h2>1.2.2 为什么要创造一门编程语言</h2><ul>	<li>C/C++ 的发展速度无法跟上计算机发展的脚步，十多年来也没有出现一门与时代相符的主流系统编程语言，因此人们需要一门新的系统编程语言来弥补这个空缺，尤其是在计算机信息时代。</li>	<li>对比计算机性能的提升，软件开发领域不被认为发展地足够快或者比硬件发展更加成功（有许多项目均以失败告终），同时应用程序的体积始终在不断地扩大，这就迫切地需要一门具备更高层次概念的低级语言来突破现状。</li>	<li>在 Go 语言出现之前，开发者们总是面临非常艰难的抉择，究竟是使用执行速度快但是编译速度并不理想的语言（如：C++），还是使用编译速度较快但执行效率不佳的语言（如：.NET、Java），或者说开发难度较低但执行速度一般的动态语言呢？显然，Go 语言在这 3 个条件之间做到了最佳的平衡：快速编译，高效执行，易于开发。</li></ul><h2>1.2.3 Go 语言的发展目标</h2><p>Go 语言的主要目标是将静态语言的安全性和高效性与动态语言的易开发性进行有机结合，达到完美平衡，从而使编程变得更加有乐趣，而不是在艰难抉择中痛苦前行。</p><p>因此，Go 语言是一门类型安全和内存安全的编程语言。虽然 Go 语言中仍有指针的存在，但并不允许进行指针运算。</p><p>Go 语言的另一个目标是对于网络通信、并发和并行编程的极佳支持，从而更好地利用大量的分布式和多核的计算机，这一点对于谷歌内部的使用来说就非常重要了。设计者通过 goroutine 这种轻量级线程的概念来实现这个目标，然后通过 channel 来实现各个 goroutine 之间的通信。他们实现了分段栈增长和 goroutine 在线程基础上多路复用技术的自动化。</p><p>这个特性显然是 Go 语言最强有力的部分，不仅支持了日益重要的多核与多处理器计算机，也弥补了现存编程语言在这方面所存在的不足。</p><p>Go 语言中另一个非常重要的特性就是它的构建速度（编译和链接到机器代码的速度），一般情况下构建一个程序的时间只需要数百毫秒到几秒。作为大量使用 C++ 来构建基础设施的谷歌来说，无疑从根本上摆脱了 C++ 在构建速度上非常不理想的噩梦。这不仅极大地提升了开发者的生产力，同时也使得软件开发过程中的代码测试环节更加紧凑，而不必浪费大量的时间在等待程序的构建上。</p><p>依赖管理是现今软件开发的一个重要组成部分，但是 C 语言中&ldquo;头文件&rdquo;的概念却导致越来越多因为依赖关系而使得构建一个大型的项目需要长达几个小时的时间。人们越来越需要一门具有严格的、简洁的依赖关系分析系统从而能够快速编译的编程语言。这正是 Go 语言采用包模型的根本原因，这个模型通过严格的依赖关系检查机制来加快程序构建的速度，提供了非常好的可量测性。</p><p>整个 Go 语言标准库的编译时间一般都在 20 秒以内，其它的常规项目也只需要半秒钟的时间来完成编译工作。这种闪电般的编译速度甚至比编译 C 语言或者 Fortran 更加快，使得编译这一环节不再成为在软件开发中困扰开发人员的问题。在这之前，动态语言将快速编译作为自身的一大亮点，像 C++ 那样的静态语言一般都有非常漫长的编译和链接工作。而同样作为静态语言的 Go 语言，通过自身优良的构建机制，成功地去除了这个弊端，使得程序的构建过程变得微不足道，拥有了像脚本语言和动态语言那样的高效开发的能力。</p><p>另外，Go 语言在执行速度方面也可以与 C/C++ 相提并论。</p><p>由于内存问题（通常称为内存泄漏）长期以来一直伴随着 C++ 的开发者们，Go 语言的设计者们认为内存管理不应该是开发人员所需要考虑的问题。因此尽管 Go 语言像其它静态语言一样执行本地代码，但它依旧运行在某种意义上的虚拟机，以此来实现高效快速的垃圾回收（使用了一个简单的标记-清除算法）。</p><p>尽管垃圾回收并不容易实现，但考虑这将是未来并发应用程序发展的一个重要组成部分，Go 语言的设计者们还是完成了这项艰难的任务。</p><p>Go 语言还能够在运行时进行反射相关的操作。</p><p>使用&nbsp;<code>go install</code>&nbsp;能够很轻松地对第三方包进行部署。</p><p>此外，Go 语言还支持调用由 C 语言编写的海量库文件（第 3.9 节），从而能够将过去开发的软件进行快速迁移。</p><h2>1.2.4 指导设计原则</h2><p>Go语言通过减少关键字的数量（25 个）来简化编码过程中的混乱和复杂度。干净、整齐和简洁的语法也能够提高程序的编译速度，因为这些关键字在编译过程中少到甚至不需要符号表来协助解析。</p><p>这些方面的工作都是为了减少编码的工作量，甚至可以与 Java 的简化程度相比较。</p><p>Go 语言有一种极简抽象艺术家的感觉，因为它只提供了一到两种方法来解决某个问题，这使得开发者们的代码都非常容易阅读和理解。众所周知，代码的可读性是软件工程里最重要的一部分（&nbsp;<strong>译者注：代码是写给人看的，不是写给机器看的</strong>&nbsp;）。</p><p>这些设计理念没有建立其它概念之上，所以并不会因为牵扯到一些概念而将某个概念复杂化，他们之间是相互独立的。</p><p>Go 语言有一套完整的编码规范，你可以在&nbsp;<a href=\"http://golang.org/doc/go_spec.html\">Go 语言编码规范</a>&nbsp;页面进行查看。</p><p>它不像 Ruby 那样通过实现过程来定义编码规范。作为一门具有明确编码规范的语言，它要求可以采用不同的编译器如 gc 和 gccgo（第 2.1 节）进行编译工作，这对语言本身拥有更好的编码规范起到很大帮助。</p><p><a href=\"http://en.wikipedia.org/wiki/LALR_parser\">LALR</a>&nbsp;是 Go 语言的语法标准，你也可以在&nbsp;<a href=\"https://github.com/golang/go/blob/master/src%2Fcmd%2Finternal%2Fgc%2Fgo.y\"><code>src/cmd/internal/gc/go.y</code></a>&nbsp;中查看到，这种语法标准在编译时不需要符号表来协助解析。</p><h2>1.2.5 语言的特性</h2><p>Go 语言从本质上（程序和结构方面）来实现并发编程。</p><p>因为 Go 语言没有类和继承的概念，所以它和 Java 或 C++ 看起来并不相同。但是它通过接口（interface）的概念来实现多态性。Go 语言有一个清晰易懂的轻量级类型系统，在类型之间也没有层级之说。因此可以说这是一门混合型的语言。</p><p>在传统的面向对象语言中，使用面向对象编程技术显得非常臃肿，它们总是通过复杂的模式来构建庞大的类型层级，这违背了编程语言应该提升生产力的宗旨。</p><p>函数是 Go 语言中的基本构件，它们的使用方法非常灵活。在第六章，我们会看到 Go 语言在函数式编程方面的基本概念。</p><p>Go 语言使用静态类型，所以它是类型安全的一门语言，加上通过构建到本地代码，程序的执行速度也非常快。</p><p>作为强类型语言，隐式的类型转换是不被允许的，记住一条原则：让所有的东西都是显式的。</p><p>Go 语言其实也有一些动态语言的特性（通过关键字&nbsp;<code>var</code>），所以它对那些逃离 Java 和 .Net 世界而使用 Python、Ruby、PHP 和 JavaScript 的开发者们也具有很大的吸引力。</p><p>Go 语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发运行下 Windows 下运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8 编码。Go 语言做到了真正的国际化！</p><h2>1.2.6 语言的用途</h2><p>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p><p>Go 语言一个非常好的目标就是实现所谓的复杂事件处理（<a href=\"http://en.wikipedia.org/wiki/Complex_event_processing\">CEP</a>），这项技术要求海量并行支持，高度的抽象化和高性能。当我们进入到物联网时代，CEP 必然会成为人们关注的焦点。</p><p>但是 Go 语言同时也是一门可以用于实现一般目标的语言，例如对于文本的处理，前端展现，甚至像使用脚本一样使用它。</p><p>值得注意的是，因为垃圾回收和自动内存分配的原因，Go 语言不适合用来开发对实时性要求很高的软件。</p><p>越来越多的谷歌内部的大型分布式应用程序都开始使用 Go 语言来开发，例如谷歌地球的一部分代码就是由 Go 语言完成的。</p><p>如果你想知道一些其它组织使用Go语言开发的实际应用项目，你可以到&nbsp;<a href=\"http://go-lang.cat-v.org/organizations-using-go\">使用 Go 的组织</a>&nbsp;页面进行查看。出于隐私保护的考虑，许多公司的项目都没有展示在这个页面。我们将会在第 21 章讨论到一个使用 Go 语言开发的大型存储区域网络（SAN）案例。</p><p>在 Chrome 浏览器中内置了一款 Go 语言的编译器用于本地客户端（NaCl），这很可能会被用于在 Chrome OS 中执行 Go 语言开发的应用程序。</p><p>Go 语言可以在 Intel 或 ARM 处理器上运行，因此它也可以在安卓系统下运行，例如 Nexus 系列的产品。</p><p>在 Google App Engine 中使用 Go 语言：2011 年 5 月 5 日，官方发布了用于开发运行在 Google App Engine 上的 Web 应用的 Go SDK，在此之前，开发者们只能选择使用 Python 或者 Java。这主要是 David Symonds 和 Nigel Tao 努力的成果。目前最新的稳定版是基于 Go 1.4 的 SDK 1.9.18，于 2015 年 2 月 18 日发布。当前 Go 语言的稳定版本是 Go 1.4.2。</p><h2>1.2.7 关于特性缺失</h2><p>许多能够在大多数面向对象语言中使用的特性 Go 语言都没有支持，但其中的一部分可能会在未来被支持。</p><ul>	<li>为了简化设计，不支持函数重载和操作符重载</li>	<li>为了避免在 C/C++ 开发中的一些 Bug 和混乱，不支持隐式转换</li>	<li>Go 语言通过另一种途径实现面向对象设计（第 10-11 章）来放弃类和类型的继承</li>	<li>尽管在接口的使用方面（第 11 章）可以实现类似变体类型的功能，但本身不支持变体类型</li>	<li>不支持动态加载代码</li>	<li>不支持动态链接库</li>	<li>不支持泛型</li>	<li>通过&nbsp;<code>recover</code>&nbsp;和&nbsp;<code>panic</code>&nbsp;来替代异常机制（第 13.2-3 节）</li>	<li>不支持断言</li>	<li>不支持静态变量</li></ul><p>关于 Go 语言开发团队对于这些方面的讨论，你可以通过&nbsp;<a href=\"http://golang.org/doc/go_faq.html\">Go 常见问题</a>&nbsp;页面查看。</p><h2>1.2.8 使用 Go 语言编程</h2><p>如果你有其它语言的编程经历（面向对象编程语言，如：Java、C#、Object-C、Python、Ruby），在你进入到 Go 语言的世界之后，你将会像迷恋你的 X 语言一样无法自拔。Go 语言使用了与其它语言不同的设计模式，所以当你尝试将你的X语言的代码迁移到 Go 语言时，你将会非常失望，所以你需要从头开始，用 Go 的理念来思考。</p><p>如果你在至高点使用 Go 的理念来重新审视和分析一个问题，你通常会找到一个适用于 Go 语言的优雅的解决方案。</p><h2>1.2.9 小结</h2><p>这里列举一些 Go 语言的必杀技：</p><ul>	<li>简化问题，易于学习</li>	<li>内存管理，简洁语法，易于使用</li>	<li>快速编译，高效开发</li>	<li>高效执行</li>	<li>并发支持，轻松驾驭</li>	<li>静态类型</li>	<li>标准类库，规范统一</li>	<li>易于部署</li>	<li>文档全面</li>	<li>免费开源</li></ul>',1,'正如 “21 世纪的 C 语言” 这句话所说，Go 语言并不是凭空而造的，而是和 C++、Java 和 C# 一样属于 C 系。不仅如此，设计者们还汲取了其它编程语言的精粹部分融入到 Go 语言当中。',1,'2016-10-29 05:16:58','2016-10-29 05:16:58','2016-10-29 05:16:58',0,0,'',2,' web-design',0,0),(23,1,'2.1 平台与架构','<p>Go 语言开发团队开发了适用于以下操作系统的编译器：</p><ul>	<li>Linux</li>	<li>FreeBSD</li>	<li>Mac OS X（也称为 Darwin）</li></ul><p>目前有2个版本的编译器：Go 原生编译器 gc 和非原生编译器 gccgo，这两款编译器都是在类 Unix 系统下工作 。其中，gc 版本的编译器已经被移植到 Windows 平台上，并集成在主要发行版中，你也可以通过安装 MinGW 从而在 Windows 平台下使用 gcc 编译器。这两个编译器都是以单通道的形式工作。</p><p>你可以获取以下平台上的 Go 1.4 源码和二进制文件：</p><ul>	<li>Linux 2.6+：amd64、386 和 arm 架构</li>	<li>Mac OS X（Snow Leopard + Lion）：amd64 和 386 架构</li>	<li>Windows 2000+：amd64 和 386 架构</li></ul><p>对于非常底层的纯 Go 语言代码或者包而言，在各个操作系统平台上的可移植性是非常强的，只需要将源码拷贝到相应平台上进行编译即可，或者可以使用交叉编译来构建目标平台的应用程序（第 2.2 节）。但如果你打算使用 cgo 或者类似文件监控系统的软件，就需要根据实际情况进行相应地修改了。</p><ol>	<li>	<p>Go 原生编译器 gc：</p>	<p>主要基于 Ken Thompson 先前在 Plan 9 操作系统上使用的 C 工具链。</p>	<p>Go 语言的编译器和链接器都是使用 C 语言编写并产生本地代码，Go 不存在自我引导之类的功能。因此如果使用一个有不同指令集的编译器来构建 Go 程序，就需要针对操作系统和处理器架构（32 位操作系统或 64 位操作系统）进行区别对待。</p>	<p>这款编译器使用非分代、无压缩和并行的方式进行编译，它的编译速度要比 gccgo 更快，产生更好的本地代码，但编译后的程序不能够使用 gcc 进行链接。</p>	<p>编译器目前支持以下基于 Intel 或 AMD 处理器架构的程序构建。</p>	<p><img alt=\"\" src=\"/static/upload/iamges/2016-10-29/9f0b041f-d238-4cb3-b01f-9b8259f2cc57.jpg\" style=\"width: 618px; height: 196px;\" /></p>	<p>图2.1 gc 编译器支持的处理器架构</p>	<p>当你第一次看到这套命名系统的时候你会觉得很奇葩，不过这些命名都是来自于 Plan 9 项目。</p>	<pre><code>g = 编译器：将源代码编译为项目代码（程序文本）l = 链接器：将项目代码链接到可执行的二进制文件（机器代码）</code></pre>	<p>（相关的 C 编译器名称为 6c、8c 和 5c，相关的汇编器名称为 6a、8a 和 5a）</p>	<p><strong>标记（Flags）</strong>&nbsp;是指可以通过命令行设置可选参数来影响编译器或链接器的构建过程或得到一个特殊的目标结果。</p>	<p>可用的编译器标记如下：</p>	<pre><code>flags:-I 针对包的目录搜索-d 打印声明信息-e 不限制错误打印的个数-f 打印栈结构-h 发生错误时进入恐慌（panic）状态-o 指定输出文件名 // 详见第3.4节-S 打印产生的汇编代码-V 打印编译器版本 // 详见第2.3节-u 禁止使用 unsafe 包中的代码-w 打印归类后的语法解析树-x 打印 lex tokens</code></pre>	<p>从 Go 1.0.3 版本开始，不再使用 8g，8l 之类的指令进行程序的构建，取而代之的是统一的&nbsp;<code>go build</code>&nbsp;和&nbsp;<code>go install</code>&nbsp;等命令，而这些指令会自动调用相关的编译器或链接器。</p>	<p>如果你想获得更深层次的信息，你可以在目录&nbsp;<a href=\"https://github.com/golang/go/tree/master/src/cmd\"><code>$GOROOT/src/cmd</code></a>&nbsp;下找到编译器和链接器的源代码。Go 语言本身是由 C 语言开发的，而不是 Go 语言（Go 1.5 开始自举）。词法分析程序是 GNU bison，语法分析程序是名为&nbsp;<a href=\"https://github.com/golang/go/blob/master/src%2Fcmd%2Finternal%2Fgc%2Fgo.y\"><code>$GOROOT/src/cmd/gc/go.y</code></a>&nbsp;的 yacc 文件，它会在同一目录输出&nbsp;<code>y.tab.{c,h}</code>&nbsp;文件。如果你想知道更多有关构建过程的信息，你可以在&nbsp;<a href=\"https://github.com/golang/go/blob/master/src/make.bash\"><code>$GOROOT/src/make.bash</code></a>&nbsp;中找到。</p>	<p>大部分的目录都包含了名为&nbsp;<code>doc.go</code>&nbsp;的文件，这个文件提供了更多详细的信息。</p>	</li>	<li>	<p>gccgo 编译器：</p>	<p>一款相对于 gc 而言更加传统的编译器，使用 GCC 作为后端。GCC 是一款非常流行的 GNU 编译器，它能够构建基于众多处理器架构的应用程序。编译速度相对 gc 较慢，但产生的本地代码运行要稍微快一点。它同时也提供一些与 C 语言之间的互操作性。</p>	<p>从 Go 1 版本开始，gc 和 gccgo 在编译方面都有等价的功能。</p>	</li>	<li>	<p>文件扩展名与包（package）：</p>	<p>Go 语言源文件的扩展名很显然就是&nbsp;<code>.go</code>。</p>	<p>C 文件使用后缀名&nbsp;<code>.c</code>，汇编文件使用后缀名&nbsp;<code>.s</code>。所有的源代码文件都是通过包（packages）来组织。包含可执行代码的包文件在被压缩后使用扩展名&nbsp;<code>.a</code>（AR 文档）。</p>	<p>Go 语言的标准库（第 9.1 节）包文件在被安装后就是使用这种格式的文件。</p>	<p><strong>注意</strong>&nbsp;当你在创建目录时，文件夹名称永远不应该包含空格，而应该使用下划线 &quot;_&quot; 或者其它一般符号代替。</p>	</li></ol>',1,'Go 语言开发团队开发了适用于以下操作系统的编译器：\r\n\r\nLinux\r\nFreeBSD\r\nMac OS X（也称为 Darwin）',1,'2016-10-29 05:19:32','2016-10-29 05:19:32','2016-10-29 05:19:32',0,0,'',4,' web-design',0,0),(24,0,'2.2 Go 环境变量','<p>Go 开发环境依赖于一些操作系统环境变量，你最好在安装 Go 之间就已经设置好他们。如果你使用的是 Windows 的话，你完全不用进行手动设置，Go 将被默认安装在目录&nbsp;<code>c:/go</code>&nbsp;下。这里列举几个最为重要的环境变量：</p><ul>	<li><strong>$GOROOT</strong>&nbsp;表示 Go 在你的电脑上的安装位置，它的值一般都是&nbsp;<code>$HOME/go</code>，当然，你也可以安装在别的地方。</li>	<li><strong>$GOARCH</strong>&nbsp;表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。</li>	<li><strong>$GOOS</strong>&nbsp;表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。</li>	<li><strong>$GOBIN</strong>&nbsp;表示编译器和链接器的安装位置，默认是&nbsp;<code>$GOROOT/bin</code>，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。</li></ul><p>目标机器是指你打算运行你的 Go 应用程序的机器。</p><p>Go 编译器支持交叉编译，也就是说你可以在一台机器上构建运行在具有不同操作系统和处理器架构上运行的应用程序，也就是说编写源代码的机器可以和目标机器有完全不同的特性（操作系统与处理器架构）。</p><p>为了区分本地机器和目标机器，你可以使用&nbsp;<code>$GOHOSTOS</code>&nbsp;和&nbsp;<code>$GOHOSTARCH</code>&nbsp;设置目标机器的参数，这两个变量只有在进行交叉编译的时候才会用到，如果你不进行显示设置，他们的值会和本地机器（<code>$GOOS</code>&nbsp;和&nbsp;<code>$GOARCH</code>）一样。</p><ul>	<li><strong>$GOPATH</strong>&nbsp;默认采用和&nbsp;<code>$GOROOT</code>&nbsp;一样的值，但从 Go 1.1 版本开始，你必须修改为其它路径。它可以包含多个包含 Go 语言源码文件、包文件和可执行文件的路径，而这些路径下又必须分别包含三个规定的目录：<code>src</code>、<code>pkg</code>&nbsp;和&nbsp;<code>bin</code>，这三个目录分别用于存放源码文件、包文件和可执行文件。</li>	<li><strong>$GOARM</strong>&nbsp;专门针对基于 arm 架构的处理器，它的值可以是 5 或 6，默认为 6。</li>	<li><strong>$GOMAXPROCS</strong>&nbsp;用于设置应用程序可使用的处理器个数与核数，详见第 14.1.3 节。</li></ul><p>在接下来的章节中，我们将会讨论如何在 Linux、Mac OS X 和 Windows 上安装 Go 语言。在 FreeBSD 上的安装和 Linux 非常类似。开发团队正在尝试将 Go 语言移植到其它例如 OpenBSD、DragonFlyBSD、NetBSD、Plan 9、Haiku 和 Solaris 操作系统上，你可以在这个页面找到最近的动态：<a href=\"http://go-lang.cat-v.org/os-ports\">Go Porting Efforts</a>。</p>',1,'Go 开发环境依赖于一些操作系统环境变量，你最好在安装 Go 之间就已经设置好他们。如果你使用的是 Windows 的话，你完全不用进行手动设置，Go 将被默认安装在目录 c:/go 下。',1,'2016-10-29 05:20:25','2016-10-29 05:20:25','2016-10-29 05:20:25',0,0,'',0,' web-design',0,0),(25,0,'2.3 在 Linux 上安装 Go','<ol>	<li>	<p>设置 Go 环境变量</p>	<p>我们在 Linux 系统下一般通过文件&nbsp;<code>$HOME/.bashrc</code>&nbsp;配置自定义环境变量，根据不同的发行版也可能是文件&nbsp;<code>$HOME/.profile</code>，然后使用 gedit 或 vi 来编辑文件内容。</p>	<pre><code>export GOROOT=$HOME/go</code></pre>	<p>为了确保相关文件在文件系统的任何地方都能被调用，你还需要添加以下内容：</p>	<pre><code>export PATH=$PATH:$GOROOT/bin</code></pre>	<p>在开发 Go 项目时，你还需要一个环境变量来保存你的工作目录。</p>	<pre><code>export GOPATH=$HOME/Applications/Go</code></pre>	<p><code>$GOPATH</code>&nbsp;可以包含多个工作目录，取决于你的个人情况。如果你设置了多个工作目录，那么当你在之后使用&nbsp;<code>go get</code>（远程包安装命令）时远程包将会被安装在第一个目录下。</p>	<p>在完成这些设置后，你需要在终端输入指令&nbsp;<code>source .bashrc</code>&nbsp;以使这些环境变量生效。然后重启终端，输入&nbsp;<code>go env</code>&nbsp;和&nbsp;<code>env</code>&nbsp;来检查环境变量是否设置正确。</p>	</li>	<li>	<p>安装 C 工具</p>	<p>Go 的工具链是用 C 语言编写的，因此在安装 Go 之前你需要先安装相关的 C 工具。如果你使用的是 Ubuntu 的话，你可以在终端输入以下指令（&nbsp;<strong>译者注：由于网络环境的特殊性，你可能需要将每个工具分开安装</strong>&nbsp;）。</p>	<pre><code>sudo apt-get install bison ed gawk gcc libc6-dev make</code></pre>	<p>你可以在其它发行版上使用 RPM 之类的工具。</p>	</li>	<li>	<p>获取 Go 源代码</p>	<p>从&nbsp;<a href=\"https://golang.org/dl/\">官方页面</a>&nbsp;或&nbsp;<a href=\"http://www.golangtc.com/download\">国内镜像</a>&nbsp;下载 Go 的源码包到你的计算机上，然后将解压后的目录&nbsp;<code>go</code>&nbsp;通过命令移动到&nbsp;<code>$GOROOT</code>&nbsp;所指向的位置。</p>	<pre><code>wget https://storage.googleapis.com/golang/go&lt;VERSION&gt;.src.tar.gztar -zxvf go&lt;VERSION&gt;.src.tar.gzsudo mv go $GOROOT</code></pre>	</li>	<li>	<p>构建 Go</p>	<p>在终端使用以下指令来进行编译工作。</p>	<pre><code>cd $GOROOT/src./all.bash</code></pre>	<p>在完成编译之后（通常在 1 分钟以内，如果你在 B 型树莓派上编译，一般需要 1 个小时），你会在终端看到如下信息被打印：</p>	<p><img alt=\"\" src=\"../images/2.3.allbash.png?raw=true\" /></p>	<p>图 2.3 完成编译后在终端打印的信息</p>	<p><strong>注意事项</strong></p>	<p>在测试&nbsp;<code>net/http</code>&nbsp;包时有一个测试会尝试连接&nbsp;<code>google.com</code>，你可能会看到如下所示的一个无厘头的错误报告：</p>	<pre><code>&lsquo;make[2]: Leaving directory `/localusr/go/src/pkg/net&rsquo;</code></pre>	<p>如果你正在使用一个带有防火墙的机器，我建议你可以在编译过程中暂时关闭防火墙，以避免不必要的错误。</p>	<p>解决这个问题的另一个办法是通过设置环境变量&nbsp;<code>$DISABLE_NET_TESTS</code>&nbsp;来告诉构建工具忽略&nbsp;<code>net/http</code>&nbsp;包的相关测试：</p>	<pre><code>export DISABLE_NET_TESTS=1</code></pre>	<p>如果你完全不想运行包的测试，你可以直接运行&nbsp;<code>./make.bash</code>&nbsp;来进行单纯的构建过程。</p>	</li>	<li>	<p>测试安装</p>	<p>使用你最喜爱的编辑器来输入以下内容，并保存为文件名&nbsp;<code>test.go</code>。</p>	<p>示例 2.1&nbsp;<a href=\"examples/chapter_2/hello_world1.go\">hello_world1.go</a></p>	<pre><code>package mainfunc main() {    println(&quot;Hello&quot;, &quot;world&quot;)}</code></pre>	<p>切换相关目录到下，然后执行指令&nbsp;<code>go run hello_world1.go</code>，将会打印信息：<code>Hello, world</code>。</p>	</li>	<li>	<p>验证安装版本</p>	<p>你可以通过在终端输入指令&nbsp;<code>go version</code>&nbsp;来打印 Go 的版本信息。</p>	<p>如果你想要通过 Go 代码在运行时检测版本，可以通过以下例子实现。</p>	<p>示例 2.2&nbsp;<a href=\"examples/chapter_2/version.go\">version.go</a></p>	<pre><code>package mainimport (    &quot;fmt&quot;    &quot;runtime&quot;)func main() {    fmt.Printf(&quot;%s&quot;, runtime.Version())}</code></pre>	<p>这段代码将会输出&nbsp;<code>go1.4.2</code>&nbsp;或类似字符串。</p>	</li>	<li>	<p>更新版本</p>	<p>你可以在&nbsp;<a href=\"http://golang.org/doc/devel/release.html\">发布历史</a>&nbsp;页面查看到最新的稳定版。</p>	<p>当前最新的稳定版 Go 1 系列于 2012 年 3 月 28 日发布。</p>	<p>Go 的源代码有以下三个分支：</p>	<pre><code>- Go release：最新稳定版，实际开发最佳选择- Go weekly：包含最近更新的版本，一般每周更新一次- Go tip：永远保持最新的版本，相当于内测版</code></pre>	<p>当你在使用不同的版本时，注意官方博客发布的信息，因为你所查阅的文档可能和你正在使用的版本不相符。</p>	</li></ol>',1,'如果你能够自己下载并编译 Go 的源代码来说是非常有教育意义的，你可以根据这个页面找到安装指南和下载地址：Download the Go distribution。\r\n\r\n我们接下来也会带你一步步的完成安装过程。',1,'2016-10-29 05:47:55','2016-10-29 05:47:55','2016-10-29 05:47:55',0,0,'',0,' web-design',0,0),(26,0,'2.4 在 Mac OS X 上安装 Go','<p>果你想要在你的 Mac 系统上安装 Go，则必须使用 Intel 64 位处理器，Go 不支持 PowerPC 处理器。</p><p>你可以通过该页面查看有关在 PowerPC 处理器上的移植进度：<a href=\"https://codedr-go-ppc.googlecode.com/hg/\">https://codedr-go-ppc.googlecode.com/hg/</a>。</p><p><strong>注意事项</strong></p><p>在 Mac 系统下使用到的 C 工具链是 Xcode 的一部分，因此你需要通过安装 Xcode 来完成这些工具的安装。你并不需要安装完整的 Xcode，而只需要安装它的命令行工具部分。</p><p>你可以在&nbsp;<a href=\"http://golang.org/dl/\">下载页面</a>&nbsp;页面下载到 Mac 系统下的一键安装包或源代码自行编译。</p><p>通过源代码编译安装的过程与环境变量的配置与在 Linux 系统非常相似，因此不再赘述。</p>',1,'如果你想要在你的 Mac 系统上安装 Go，则必须使用 Intel 64 位处理器，Go 不支持 PowerPC 处理器。',1,'2016-10-29 05:50:17','2016-10-29 05:50:17','2016-10-29 05:50:17',0,0,'',1,' web-design',0,0),(27,0,'2.5 在 Windows 上安装 Go','<p>前期的 Windows 移植工作由 Hector Chu 完成，但目前的发行版已经由 Joe Poirier 全职维护。</p><p>在完成安装包的安装之后，你只需要配置&nbsp;<code>$GOPATH</code>&nbsp;这一个环境变量就可以开始使用 Go 语言进行开发了，其它的环境变量安装包均会进行自动设置。在默认情况下，Go 将会被安装在目录&nbsp;<code>c:\\go</code>&nbsp;下，但如果你在安装过程中修改安装目录，则可能需要手动修改所有的环境变量的值。</p><p>如果你想要测试安装，则可以使用指令&nbsp;<code>go run</code>&nbsp;运行&nbsp;<a href=\"examples/chapter_2/hello_world1.go\">hello_world1.go</a>。</p><p>如果发生错误&nbsp;<code>fatal error: can&rsquo;t find import: fmt</code>&nbsp;则说明你的环境变量没有配置正确。</p><p>如果你想要在 Windows 下使用 cgo （调用 C 语言写的代码），则需要安装&nbsp;<a href=\"http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/\">MinGW</a>，一般推荐安装&nbsp;<a href=\"http://tdm-gcc.tdragon.net/\">TDM-GCC</a>。如果你使用的是 64 位操作系统，请务必安装 64 位版本的 MinGW。安装完成进行环境变量等相关配置即可使用。</p><p><strong>在 Windows 下运行在虚拟机里的 Linux 系统上安装 Go</strong>：</p><p>如果你想要在 Windows 下的虚拟机里的 Linux 系统上安装 Go，你可以选择使用虚拟机软件&nbsp;<a href=\"http://www.vmware.com\">VMware</a>，下载&nbsp;<a href=\"http://www.vmware.com/products/player/\">VMware player</a>，搜索并下载一个你喜欢的 Linux 发行版镜像，然后安装到虚拟机里，安装 Go 的流程参考第 2.3 节中的内容。</p><h2>链接</h2>',1,'你可以在 下载页面 页面下载到 Windows 系统下的一键安装包。',1,'2016-10-29 05:52:45','2016-10-29 05:52:45','2016-10-29 05:52:45',0,0,'',0,' web-design',0,0),(28,0,'2.6 安装目录清单','<p>你的 Go 安装目录（<code>$GOROOT</code>）的文件夹结构应该如下所示：</p><p>README.html, AUTHORS, CONTRIBUTORS, LICENSE</p><ul>	<li><code>/bin</code>：包含可执行文件，如：编译器，Go 工具</li>	<li><code>/doc</code>：包含示例程序，代码工具，本地文档等</li>	<li><code>/lib</code>：包含文档模版</li>	<li><code>/misc</code>：包含与支持 Go 编辑器有关的配置文件以及 cgo 的示例</li>	<li><code>/os_arch</code>：包含标准库的包的对象文件（<code>.a</code>）</li>	<li><code>/src</code>：包含源代码构建脚本和标准库的包的完整源代码（Go 是一门开源语言）</li>	<li><code>/src/cmd</code>：包含 Go 和 C 的编译器和命令行脚本</li></ul>',1,'你的 Go 安装目录（$GOROOT）的文件夹结构应该如下所示：\r\n\r\nREADME.html, AUTHORS, CONTRIBUTORS, LICENSE',1,'2016-10-29 05:55:12','2016-10-29 05:55:12','2016-10-29 05:55:12',0,0,'',0,' web-design',0,0),(29,0,'2.7 Go 运行时（runtime）','<p>尽管 Go 编译器产生的是本地可执行代码，这些代码仍旧运行在 Go 的 runtime（这部分的代码可以在 runtime 包中找到）当中。这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收（第 10.8 节）、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。</p><p>runtime 主要由 C 语言编写（Go 1.5 开始自举），并且是每个 Go 包的最顶级包。你可以在目录&nbsp;<a href=\"https://github.com/golang/go/tree/master/src/runtime\"><code>$GOROOT/src/runtime</code></a>&nbsp;中找到相关内容。</p><p><strong>垃圾回收器</strong>&nbsp;Go 拥有简单却高效的标记-清除回收器。它的主要思想来源于 IBM 的可复用垃圾回收器，旨在打造一个高效、低延迟的并发回收器。目前 gccgo 还没有回收器，同时适用 gc 和 gccgo 的新回收器正在研发中。使用一门具有垃圾回收功能的编程语言不代表你可以避免内存分配所带来的问题，分配和回收内容都是消耗 CPU 资源的一种行为。</p><p>Go 的可执行文件都比相对应的源代码文件要大很多，这恰恰说明了 Go 的 runtime 嵌入到了每一个可执行文件当中。当然，在部署到数量巨大的集群时，较大的文件体积也是比较头疼的问题。但总得来说，Go 的部署工作还是要比 Java 和 Python 轻松得多。因为 Go 不需要依赖任何其它文件，它只需要一个单独的静态文件，这样你也不会像使用其它语言一样在各种不同版本的依赖文件之间混淆。</p>',1,'尽管 Go 编译器产生的是本地可执行代码，这些代码仍旧运行在 Go 的 runtime（这部分的代码可以在 runtime 包中找到）当中。这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收（第 10.8 节）、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。',1,'2016-10-29 05:57:44','2016-10-29 05:57:44','2016-10-29 05:57:44',0,0,'',0,' web-design',0,0),(30,0,'2.8 Go 解释器','<p>为 Go 具有像动态语言那样快速编译的能力，自然而然地就有人会问 Go 语言能否在 REPL（read-eval-print loop）编程环境下实现。Sebastien Binet 已经使用这种环境实现了一个 Go 解释器，你可以在这个页面找到：<a href=\"https://github.com/sbinet/igo\">https://github.com/sbinet/igo</a>。</p>',1,'Go 解释器',1,'2016-10-29 06:00:04','2016-10-29 06:00:04','2016-10-29 06:00:04',0,0,'',2,' web-design',0,0),(31,0,'3.0 编辑器、集成开发环境与其它工具','<p>因为 Go 语言还是一门相对年轻的编程语言，所以不管是在集成开发环境（IDE）还是相关的插件方面，发展都不是很成熟。不过目前还是有一些 IDE 能够较好地支持 Go 的开发，有些开发工具甚至是跨平台的，你可以在 Linux、Mac OS X 或者 Windows 下工作。</p><p>你可以通过查阅&nbsp;<a href=\"http://go-lang.cat-v.org/text-editors/\">编辑器和 IDE 扩展</a>&nbsp;页面来获取 Go 开发工具的最新信息。</p>',1,'因为 Go 语言还是一门相对年轻的编程语言，所以不管是在集成开发环境（IDE）还是相关的插件方面，发展都不是很成熟。',1,'2016-10-29 14:10:50','2016-10-29 14:10:50','2016-10-29 14:10:50',0,0,'',8,' web-design',0,0),(32,0,'3.1 Go 开发环境的基本要求','<p>这里有一个你可以期待你用来开发 Go 的集成开发环境有哪些特性的列表，从而替代你使用文本编辑器写代码和命令行编译与链接程序的方式。</p><ol>	<li>语法高亮是必不可少的功能，这也是为什么每个开发工具都提供配置文件来实现自定义配置的原因。</li>	<li>可以自动保存代码，至少在每次编译前都会保存。</li>	<li>可以显示代码所在的行数。</li>	<li>拥有较好的项目文件纵览和导航能力，可以同时编辑多个源文件并设置书签，能够匹配括号，能够跳转到某个函数或类型的定义部分。</li>	<li>完美的查找和替换功能，替换之前最好还能预览结果。</li>	<li>可以注释或取消注释选中的一行或多行代码。</li>	<li>当有编译错误时，双击错误提示可以跳转到发生错误的位置。</li>	<li>跨平台，能够在 Linux、Mac OS X 和 Windwos 下工作，这样就可以专注于一个开发环境。</li>	<li>最好是免费的，不过有些开发者还是希望能够通过支付一定金额以获得更好的开发环境。</li>	<li>最好是开源的。</li>	<li>能够通过插件架构来轻易扩展和替换某个功能。</li>	<li>尽管集成开发环境本身就是非常复杂的，但一定要让人感觉操作方便。</li>	<li>能够通过代码模版来简化编码过程从而提升编码速度。</li>	<li>使用 Go 项目的概念来浏览和管理项目中的文件，同时还要拥有构建系统的概念，这样才能更加方便的构建、清理或运行我们建立的程序或项目。构建出的程序需要能够通过命令行或 IDE 内部的控制台运行。</li>	<li>拥有断点、检查变量值、单步执行、逐过程执行标识库中代码的能力。</li>	<li>能够方便的存取最近使用过的文件或项目。</li>	<li>拥有对包、类型、变量、函数和方法的智能代码补全的功能。</li>	<li>能够对项目或包中的代码建立抽象语法树视图（AST-view）。</li>	<li>内置 Go 的相关工具。</li>	<li>能够方便完整地查阅 Go 文档。</li>	<li>能够方便地在不同的 Go 环境之间切换。</li>	<li>能够导出不同格式的代码文件，如：PDF，HTML 或格式化后的代码。</li>	<li>针对一些特定的项目有项目模板，如：Web 应用，App Engine 项目，从而能够更快地开始开发工作。</li>	<li>具备代码重构的能力。</li>	<li>集成像 hg 或 git 这样的版本控制工具。</li>	<li>集成 Google App Engine 开发及调试的功能。</li></ol>',1,'这里有一个你可以期待你用来开发 Go 的集成开发环境有哪些特性的列表，从而替代你使用文本编辑器写代码和命令行编译与链接程序的方式。',1,'2016-10-29 14:15:22','2016-10-29 14:15:22','2016-10-29 14:15:22',0,0,'',22,' web-design',0,0);

/*Table structure for table `roll_pic` */

DROP TABLE IF EXISTS `roll_pic`;

CREATE TABLE `roll_pic` (
  `id` bigint(20) NOT NULL auto_increment,
  `title` varchar(255) NOT NULL default '',
  `describe` varchar(256) NOT NULL default '',
  `blong_post_id` bigint(20) NOT NULL default '0',
  `image_url` varchar(255) NOT NULL default '',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `title` (`title`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Data for the table `roll_pic` */

insert  into `roll_pic`(`id`,`title`,`describe`,`blong_post_id`,`image_url`) values (1,'世界你好','模板函数\r\nbeego 支持用户定义模板函数，但是必须在 beego.Run() 调用之前，设置如下',17,'static/upload/iamges/2016-10-25/1fd4958b-a580-4b12-b4ef-4e4f7bdf1af0.jpg'),(2,'Bootstrap 更新','简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。',7,'static/upload/iamges/2016-10-21/fe6abf8b-60c8-40ac-9237-d7beada9094d.jpg'),(3,'项目路由设置','前面我们已经创建了 beego 项目，而且我们也看到它已经运行起来了，那么是如何运行起来的呢？让我们从入口文件先分析起来吧：\r\n\r\npackage main\r\n\r\nimport (\r\n    _ \"quickstart/routers\"\r\n    \"github.com/astaxie/beego\"\r\n)\r\n\r\nfunc main() {\r\n    beego.Run()\r\n}',4,'static/upload/iamges/2016-10-10/ae92acce-11de-4148-9f32-21280c63ee26.jpg');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` bigint(20) NOT NULL auto_increment,
  `name` varchar(24) NOT NULL default '',
  `pwd` varchar(64) NOT NULL default '',
  `pic` varchar(255) NOT NULL default '',
  `is_admin` tinyint(1) NOT NULL default '0',
  `nick_name` varchar(24) NOT NULL default '',
  `sex` tinyint(1) default '0',
  `age` int(11) NOT NULL default '0',
  `address` varchar(255) NOT NULL default '广州市天河区',
  `br` int(11) NOT NULL default '0',
  `birth` varchar(255) NOT NULL default '2016-10-10',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `pwd` (`pwd`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`name`,`pwd`,`pic`,`is_admin`,`nick_name`,`sex`,`age`,`address`,`br`,`birth`) values (1,'admin','a123','/static/upload/pic/admin.png',1,'Gy',1,21,'广州市天河区12号',0,'2016-10-21'),(2,'123','123','/static/upload/pic/123.png',0,'dell123',1,20,'广州市',0,'2016-10-01'),(3,'cre','cre','/static/img/a.jpg',0,'cre',0,18,'广州市天河区',0,'2016-10-10');

/*Table structure for table `video` */

DROP TABLE IF EXISTS `video`;

CREATE TABLE `video` (
  `id` bigint(20) NOT NULL auto_increment,
  `url` varchar(255) NOT NULL default '',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `url` (`url`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `video` */

/*Table structure for table `video_temp` */

DROP TABLE IF EXISTS `video_temp`;

CREATE TABLE `video_temp` (
  `id` bigint(20) NOT NULL auto_increment,
  `url` varchar(255) NOT NULL default '',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `url` (`url`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `video_temp` */

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
